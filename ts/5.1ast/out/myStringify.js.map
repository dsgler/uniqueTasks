{
  "version": 3,
  "sources": ["../src/myStringify.ts"],
  "sourcesContent": ["// import fs from \"fs\";\n\n// let rawJSON=fs.readFileSync(\"../src.json\",\"utf-8\");\n// let ast:Program=JSON.parse(rawJSON);\n\n// ast\n\nexport class myStringify {\n  /**\n   * @describe \u7528\u4E8E\u8C03\u7528\u5176\u4ED6\u89E3\u6790\u51FD\u6570\n   * @param d \u9700\u8981\u89E3\u6790\u7684\u5BF9\u8C61\n   * @returns \u8C03\u7528\u7ED3\u679C\n   */\n  static autoRs(d: Node | null) {\n    if (!d) {\n      return \"\";\n    }\n    try{\n        return (<any>this)[\"resolve\" + d.type](d);\n    }catch{\n        console.log(\"\u672A\u77E5\u7684\u89E3\u6790\uFF1A\")\n        console.log(d);\n    }\n  }\n\n  static resolveEmptyStatement(d: EmptyStatement) {\n    return \"\";\n  }\n\n  static resolveProgram(ast: Program) {\n    let js = this.resolveBody(ast.body);\n\n    return js;\n  }\n\n  static resolveBody(body: (Directive | Statement)[]) {\n    let js = \"\";\n    for (let d of body) {\n      js += this.autoRs(d);\n      js += \";\\n\";\n    }\n    return js;\n  }\n\n  static resolveVariableDeclaration(d: VariableDeclaration) {\n    // \u53EF\u80FD\u6709 var let const\n    let js: string = d.kind;\n    js += \" \";\n    let isFirst = true;\n    for (let dd of d.declarations) {\n      if (isFirst) {\n        isFirst = false;\n      } else {\n        js += \",\";\n      }\n\n      js += this.autoRs(dd);\n    }\n    return js;\n  }\n\n  static resolveVariableDeclarator(d: VariableDeclarator) {\n    return `${this.autoRs(d.id)} = ${this.autoRs(d.init)}`;\n  }\n\n  static resolveLiteral(d: Literal) {\n    // return typeof d.value===\"string\"? `\"${d.value}\"` : String(d.value);\n    return d.raw;\n  }\n\n  static resolveIdentifier(d: Identifier) {\n    return d.name;\n  }\n\n  static resolveBinaryExpression(d: BinaryExpression) {\n    let js = \"\";\n    js += this.autoRs(d.left);\n    js += \" \" + d.operator + \" \";\n    js += this.autoRs(d.right);\n    return js;\n  }\n\n  static resolveCallExpression(d: CallExpression): string {\n    let js = \"\";\n\n    js += this.autoRs(d.callee);\n    js += \"(\";\n\n    let isFirst = true;\n    for (let dd of d.arguments) {\n      if (isFirst) {\n        isFirst = false;\n      } else {\n        js += \",\";\n      }\n      if (dd.type===\"FunctionExpression\"){\n        js+=\"function \"\n      }\n      js += this.autoRs(dd);\n    }\n\n    js += \")\";\n\n    return js;\n  }\n\n  /**\n   * @describe \u7528\u4E8E\u89E3\u6790 a.b a[b]\u8FD9\u6837\u7684obj\n   * @param\n   * @returns\n   */\n  static resolveMemberExpression(d: MemberExpression) {\n    let js = \"\";\n\n    if (d.computed) {\n      // a[b]\u7684\u60C5\u51B5\n      js += `${this.autoRs(d.object)}[${this.autoRs(d.property)}]`;\n    } else {\n      // a.b\u7684\u60C5\u51B5\n      js += `${this.autoRs(d.object)}.${this.autoRs(d.property)}`;\n    }\n\n    return js;\n  }\n\n  static resolveAssignmentExpression(d: AssignmentExpression): string {\n    // let js=\"\"\n\n    // return js;\n\n    return this.resolveBinaryExpression(<any>d);\n  }\n\n  static resolveFunctionDeclaration(d: FunctionDeclaration) {\n    let js = \"function \";\n\n    js += this.autoRs(d.id);\n\n    js += \"(\";\n\n    let isFirst = true;\n    for (let dd of d.params) {\n      if (isFirst) {\n        isFirst = false;\n      } else {\n        js += \",\";\n      }\n\n      js += this.autoRs(dd);\n    }\n\n    js += \")\";\n\n    js += this.resolveBlockStatement(d.body);\n\n    return js;\n  }\n\n  static resolveBlockStatement(d: BlockStatement) {\n    let js = \"{\\n\";\n    js += this.resolveBody(d.body);\n    js += \"}\";\n    return js;\n  }\n\n  // \u8FD9\u4E2A\u5C31\u662F\u4E2A\u5957\u5A03\n  static resolveExpressionStatement(d: ExpressionStatement) {\n    return this.autoRs(d.expression);\n  }\n\n  static resolveUpdateExpression(d: UpdateExpression) {\n    return d.prefix\n      ? d.operator + this.autoRs(d.argument)\n      : this.autoRs(d.argument) + d.operator;\n  }\n\n  static resolveForStatement(d: ForStatement) {\n    let js = `for (${this.autoRs(d.init)};${this.autoRs(d.test)};${this.autoRs(\n      d.update\n    )})`;\n    js += this.autoRs(d.body);\n    return js;\n  }\n\n  static resolveIfStatement(d: IfStatement) {\n    let js = `if (${this.autoRs(d.test)})`;\n    js += this.autoRs(d.consequent);\n    js += \"else \";\n    js += this.autoRs(d.alternate);\n    return js;\n  }\n\n  static resolveUnaryExpression(d: UnaryExpression) {\n    if (d.prefix) {\n      return `${d.operator} ${this.autoRs(d.argument)}`;\n    } else {\n      return `${this.autoRs(d.argument)} ${d.operator}`;\n    }\n  }\n\n  static resolveConditionalExpression(d: ConditionalExpression): string {\n    return `${this.autoRs(d.test)} ? ${this.autoRs(\n      d.consequent\n    )} : ${this.autoRs(d.alternate)}`;\n  }\n\n  static resolveArrayExpression(d: ArrayExpression): string {\n    let js = \"[\";\n    let isFirst = true;\n    for (let ele of d.elements) {\n      if (isFirst) {\n        isFirst = false;\n      } else {\n        js += \",\";\n      }\n\n      js += this.autoRs(ele);\n    }\n    js += \"]\";\n    return js;\n  }\n\n  /**\n   * @returns \u4E0D\u4F1A\u8FD4\u56DE\u524D\u7F00\n   */\n  static resolveFunctionExpression(d: FunctionExpression) {\n    let js = this.autoRs(d.id) + \"(\";\n    let isFirst = true;\n    for (let p of d.params) {\n      if (isFirst) {\n        isFirst = false;\n      } else {\n        js += \",\";\n      }\n\n      js += this.autoRs(p);\n    }\n    js += \")\";\n    js += this.autoRs(d.body);\n\n    return js;\n  }\n\n  static resolveObjectExpression(d: ObjectExpression) {\n    let js = \"{\";\n    let isFirst = true;\n    for (let p of d.properties) {\n      if (isFirst) {\n        isFirst = false;\n      } else {\n        js += \",\";\n      }\n\n      js += this.autoRs(p);\n    }\n    js+=\"}\"\n    return js;\n  }\n\n  static resolveProperty(d: Property) {\n    if (d.kind === \"init\") {\n      return `${this.autoRs(d.key)} : ${this.autoRs(d.value)}`;\n    }\n\n    // getter \u548C setter\u7684\u60C5\u51B5\n    let js = `${d.kind} `;\n    js += this.autoRs(d.key);\n    js += this.autoRs(d.value);\n    return js;\n  }\n\n  static resolveReturnStatement(d:ReturnStatement){\n    return `return ${this.autoRs(d.argument)}`\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
